// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("HEROKU_POSTGRESQL_BROWN_URL")
}

model WebhookLog {
  id                  Int     @id @default(autoincrement())
  requestId           String
  idempotencyKey      String
  type                String
}

model User {
  id                  Int     @id @default(autoincrement())
  email               String  @unique
  firstName           String
  lastName            String
  subscription        Subscription?
  subscriptionActive  String?
  stripeId            String  @unique
  isAdmin             Boolean
}

// TODO: subscription routes?
model Subscription {
  id                  String  @unique
  name                String
  user                User @relation(fields: [userId], references: [id], onDelete: Cascade) 
  userId              Int @unique
  stripeId            String
  priceId             String
  productId           String
  status              String
  cancelAt            String?
}

// TODO: token routes?
model Token { 
  id                  Int       @id @default(autoincrement())
  createdAt           DateTime  @default(now())
  emailToken          String
  type                String
  expirationDate      DateTime
  userId              Int
  expiration          Int
}
model Track {
  id                  Int       @id @default(autoincrement())
  trackId             Int       @unique
  tape                Tape      @relation(fields: [tapeId], references: [id])
  tapeId              Int
  raga                Raga      @relation(fields: [ragaId], references: [id])
  ragaId              Int
  primaryArtist       Artist    @relation(fields: [primaryArtistId], references: [id])
  primaryArtistId     Int
  plays               Int?       @default(0)
  alap                Boolean
  jor                 Boolean
  jhalla              Boolean
  slowGat             Boolean
  mediumGat           Boolean
  fastGat             Boolean
  accompanied         Boolean
  notes               String?
  audioQuality        String?
  master              Boolean
  mediaType           MediaType @relation(fields: [mediaTypeId], references: [id])
  mediaTypeId         Int
  public              Boolean
  url                 String
}

model Artist {
  id                  Int       @id @default(autoincrement())
  name                String    @unique
  primaryTracks       Track[]
}

// TODO: category routes?
model Category {
  id                  Int       @id @default(autoincrement())
  name                String
  events              Event[]
}

model Event {
  id                  Int       @id @default(autoincrement())
  eventName           String
  date                String
  location            Location @relation(fields: [locationId], references: [id])
  locationId          Int
  category            Category @relation(fields: [categoryId], references: [id])
  categoryId          Int
  notes               String?
  tapes               Tape[]
}

model Location {
  id                  Int       @id @default(autoincrement())
  name                String    @unique
  events              Event[]
}

// TODO: mediaType routes?
model MediaType {
  id                  Int       @id @default(autoincrement())
  name                String    @unique
  tracks              Track[]
}

model Raga {
  id                  Int       @id @default(autoincrement())
  name                String
  alternateSpelling   String?
  time                String?
  rasa                String?
  tracks              Track[]
}

model Tape {
  id                  Int       @id @default(autoincrement())
  tapeId              Int       @unique
  event               Event     @relation(fields: [eventId], references: [id])
  eventId             Int
  tracks              Track[]
}

model TrackArtist {
  id                  Int       @id @default(autoincrement())
  artistId            Int
  trackId             Int 
}

model TrackPlay {
  id                  Int       @id @default(autoincrement())
  userId              Int
  trackId             Int 
  secondsListened     Int
}

model Tribute {
  id                  Int       @id @default(autoincrement())
  submittedBy         String
  type                String
  content             String
}

model NetworkError {
  id                  Int     @id @default(autoincrement())
  errorCode           Int
  errorMessage        String
  isRegisteredUser    Boolean
  userId              Int?
}